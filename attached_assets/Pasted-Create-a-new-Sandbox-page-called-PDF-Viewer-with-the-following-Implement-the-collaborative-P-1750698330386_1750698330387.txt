Create a new Sandbox page called "PDF Viewer" with the following:

- Implement the collaborative PDF viewer using PDF.js with the provided code structure
- Features include:
  - Zoom In / Zoom Out
  - Download PDF
  - Sidebar for comments with collapsible toggle
  - Click to add numbered pins with assigned user colors (Pink, Blue, Green, etc.)
  - Comment box appears after dropping a pin
  - Comments display in the sidebar with ability to reply
- Add multi-page support:
  - Buttons for Next Page / Previous Page
  - Display current page number and total pages
- Pins and comments are tied to the correct page
- Automatically assign pin colors per user
- Replies can be added under each comment
- Hover message shows "Click to add comment"
- Prepare structure to allow real-time updates with WebSocket integration later
- Maintain clean, modern UI consistent with existing app styles

// Basic structure for a Collaborative PDF Viewer with Pins and Comments

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { v4 as uuidv4 } from "uuid";

export default function CollaborativePDFViewer() {
  const [comments, setComments] = useState([]);
  const [pins, setPins] = useState([]);
  const [hovering, setHovering] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);

  const addComment = (x, y, text, user) => {
    const id = uuidv4();
    setPins([...pins, { id, x, y, user }]);
    setComments([...comments, { id, text, user, replies: [] }]);
  };

  return (
    <div className="flex h-screen">
      {sidebarOpen && (
        <div className="w-64 border-r p-2">
          <h2 className="text-lg font-bold mb-2">Comments</h2>
          <ScrollArea className="h-full">
            {comments.map((c, i) => (
              <Card key={c.id} className="mb-2">
                <CardContent>
                  <div className="font-bold">Pin {i + 1} ({c.user.color})</div>
                  <div>{c.text}</div>
                  {c.replies.map((r, j) => (
                    <div key={j} className="ml-2 text-sm text-gray-500">{r}</div>
                  ))}
                </CardContent>
              </Card>
            ))}
          </ScrollArea>
        </div>
      )}

      <div className="flex-1 relative" onMouseEnter={() => setHovering(true)} onMouseLeave={() => setHovering(false)}>
        <div className="absolute top-2 right-2 z-10">
          <Button onClick={() => setSidebarOpen(!sidebarOpen)}>{sidebarOpen ? "Hide" : "Show"} Comments</Button>
        </div>

        <div className="w-full h-full bg-gray-100 relative">
          {/* Replace with PDF.js rendered PDF */}
          <div className="w-full h-full" onClick={(e) => {
            const rect = e.currentTarget.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            const text = prompt("Enter your comment:");
            if (text) {
              const user = { color: randomColor() };
              addComment(x, y, text, user);
            }
          }}>
            {hovering && <div className="absolute top-2 left-2 bg-white p-1 rounded shadow">Click to add comment</div>}

            {pins.map((p, i) => (
              <div key={p.id} className="absolute" style={{ left: p.x, top: p.y }}>
                <div className="w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-bold" style={{ backgroundColor: p.user.color }}>
                  {i + 1}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

function randomColor() {
  const colors = ["#ec4899", "#3b82f6", "#22c55e", "#a855f7"]; // pink, blue, green, purple
  return colors[Math.floor(Math.random() * colors.length)];
}


Then wire in PDF.js next:

// Collaborative PDF Viewer with PDF.js, Pins, and Comments

import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { v4 as uuidv4 } from "uuid";
import * as pdfjsLib from "pdfjs-dist";
import "pdfjs-dist/web/pdf_viewer.css";

pdfjsLib.GlobalWorkerOptions.workerSrc = "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.2.67/pdf.worker.min.js";

export default function CollaborativePDFViewer() {
  const [comments, setComments] = useState([]);
  const [pins, setPins] = useState([]);
  const [hovering, setHovering] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const pdfContainerRef = useRef(null);

  useEffect(() => {
    const loadingTask = pdfjsLib.getDocument("/sample.pdf"); // Replace with your PDF path
    loadingTask.promise.then(pdf => {
      pdf.getPage(1).then(page => {
        const viewport = page.getViewport({ scale: 1.5 });
        const canvas = document.createElement("canvas");
        const context = canvas.getContext("2d");
        canvas.height = viewport.height;
        canvas.width = viewport.width;
        pdfContainerRef.current.appendChild(canvas);

        const renderContext = {
          canvasContext: context,
          viewport: viewport
        };
        page.render(renderContext);
      });
    });
  }, []);

  const addComment = (x, y, text, user) => {
    const id = uuidv4();
    setPins([...pins, { id, x, y, user }]);
    setComments([...comments, { id, text, user, replies: [] }]);
  };

  return (
    <div className="flex h-screen">
      {sidebarOpen && (
        <div className="w-64 border-r p-2">
          <h2 className="text-lg font-bold mb-2">Comments</h2>
          <ScrollArea className="h-full">
            {comments.map((c, i) => (
              <Card key={c.id} className="mb-2">
                <CardContent>
                  <div className="font-bold">Pin {i + 1} ({c.user.color})</div>
                  <div>{c.text}</div>
                  {c.replies.map((r, j) => (
                    <div key={j} className="ml-2 text-sm text-gray-500">{r}</div>
                  ))}
                </CardContent>
              </Card>
            ))}
          </ScrollArea>
        </div>
      )}

      <div className="flex-1 relative" onMouseEnter={() => setHovering(true)} onMouseLeave={() => setHovering(false)}>
        <div className="absolute top-2 right-2 z-10">
          <Button onClick={() => setSidebarOpen(!sidebarOpen)}>{sidebarOpen ? "Hide" : "Show"} Comments</Button>
        </div>

        <div className="w-full h-full bg-gray-100 relative">
          <div
            ref={pdfContainerRef}
            className="relative w-full h-full"
            onClick={(e) => {
              const rect = e.currentTarget.getBoundingClientRect();
              const x = e.clientX - rect.left;
              const y = e.clientY - rect.top;
              const text = prompt("Enter your comment:");
              if (text) {
                const user = { color: randomColor() };
                addComment(x, y, text, user);
              }
            }}
          >
            {hovering && <div className="absolute top-2 left-2 bg-white p-1 rounded shadow">Click to add comment</div>}

            {pins.map((p, i) => (
              <div key={p.id} className="absolute" style={{ left: p.x, top: p.y }}>
                <div className="w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-bold" style={{ backgroundColor: p.user.color }}>
                  {i + 1}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

function randomColor() {
  const colors = ["#ec4899", "#3b82f6", "#22c55e", "#a855f7"]; // pink, blue, green, purple
  return colors[Math.floor(Math.random() * colors.length)];
}


add in zoom and download buttons:

// Collaborative PDF Viewer with PDF.js, Pins, Zoom, Download, and Comments

import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { v4 as uuidv4 } from "uuid";
import * as pdfjsLib from "pdfjs-dist";
import "pdfjs-dist/web/pdf_viewer.css";

pdfjsLib.GlobalWorkerOptions.workerSrc = "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.2.67/pdf.worker.min.js";

export default function CollaborativePDFViewer() {
  const [comments, setComments] = useState([]);
  const [pins, setPins] = useState([]);
  const [hovering, setHovering] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [scale, setScale] = useState(1.5);
  const pdfContainerRef = useRef(null);
  const canvasRef = useRef(null);
  const pageRef = useRef(null);

  useEffect(() => {
    const loadingTask = pdfjsLib.getDocument("/sample.pdf");
    loadingTask.promise.then(pdf => {
      pdf.getPage(1).then(page => {
        pageRef.current = page;
        renderPage(page, scale);
      });
    });
  }, [scale]);

  const renderPage = (page, scale) => {
    if (canvasRef.current) {
      canvasRef.current.remove();
    }

    const viewport = page.getViewport({ scale });
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    canvas.height = viewport.height;
    canvas.width = viewport.width;
    pdfContainerRef.current.appendChild(canvas);
    canvasRef.current = canvas;

    const renderContext = {
      canvasContext: context,
      viewport: viewport
    };
    page.render(renderContext);
  };

  const addComment = (x, y, text, user) => {
    const id = uuidv4();
    setPins([...pins, { id, x, y, user }]);
    setComments([...comments, { id, text, user, replies: [] }]);
  };

  const downloadPDF = () => {
    const link = document.createElement("a");
    link.href = "/sample.pdf";
    link.download = "document.pdf";
    link.click();
  };

  return (
    <div className="flex h-screen">
      {sidebarOpen && (
        <div className="w-64 border-r p-2">
          <h2 className="text-lg font-bold mb-2">Comments</h2>
          <ScrollArea className="h-full">
            {comments.map((c, i) => (
              <Card key={c.id} className="mb-2">
                <CardContent>
                  <div className="font-bold">Pin {i + 1} ({c.user.color})</div>
                  <div>{c.text}</div>
                  {c.replies.map((r, j) => (
                    <div key={j} className="ml-2 text-sm text-gray-500">{r}</div>
                  ))}
                </CardContent>
              </Card>
            ))}
          </ScrollArea>
        </div>
      )}

      <div className="flex-1 relative" onMouseEnter={() => setHovering(true)} onMouseLeave={() => setHovering(false)}>
        <div className="absolute top-2 right-2 z-10 flex gap-2">
          <Button onClick={() => setSidebarOpen(!sidebarOpen)}>{sidebarOpen ? "Hide" : "Show"} Comments</Button>
          <Button onClick={() => setScale(scale + 0.25)}>Zoom In</Button>
          <Button onClick={() => setScale(scale - 0.25)}>Zoom Out</Button>
          <Button onClick={downloadPDF}>Download</Button>
        </div>

        <div className="w-full h-full bg-gray-100 relative">
          <div
            ref={pdfContainerRef}
            className="relative w-full h-full"
            onClick={(e) => {
              const rect = e.currentTarget.getBoundingClientRect();
              const x = e.clientX - rect.left;
              const y = e.clientY - rect.top;
              const text = prompt("Enter your comment:");
              if (text) {
                const user = { color: randomColor() };
                addComment(x, y, text, user);
              }
            }}
          >
            {hovering && <div className="absolute top-2 left-2 bg-white p-1 rounded shadow">Click to add comment</div>}

            {pins.map((p, i) => (
              <div key={p.id} className="absolute" style={{ left: p.x, top: p.y }}>
                <div className="w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-bold" style={{ backgroundColor: p.user.color }}>
                  {i + 1}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

function randomColor() {
  const colors = ["#ec4899", "#3b82f6", "#22c55e", "#a855f7"];
  return colors[Math.floor(Math.random() * colors.length)];
}